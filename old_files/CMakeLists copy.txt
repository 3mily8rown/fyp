1 May 2025 (im about to cull)
cmake_minimum_required(VERSION 3.8)

project(HelloWorld C CXX)

# to download and build external content ie git repos at configure time
include (ExternalProject)
include (FetchContent)

set(SOURCES
    src/host.cpp
    src/native_impl.cpp
    src/host_utils.cpp
    # proto_messages/generated/message.pb.cc
)

find_package(Python3 REQUIRED COMPONENTS Interpreter)
set(PYTHON_EXECUTABLE ${Python3_EXECUTABLE})

# add_subdirectory(wasm)

# ------------------------------
# Add WAMR support for wasm_host
# ------------------------------

# downloading WAMR
FetchContent_Declare(
        wamr_ext
        GIT_REPOSITORY "https://github.com/bytecodealliance/wasm-micro-runtime"
        GIT_TAG "4e50d2191ca8f177ad03a9d80eebc44b59a932db"
)
FetchContent_MakeAvailable(wamr_ext)

# extracts path downloaded WAMR to
FetchContent_GetProperties(wamr_ext SOURCE_DIR WAMR_ROOT_DIR)
message(STATUS WAMR_ROOT_DIR ${WAMR_ROOT_DIR})

# configure which features of WAMR to include
set(WAMR_BUILD_PLATFORM "linux")
set(WAMR_BUILD_TARGET X86_64)
set(WAMR_BUILD_SPEC_TEST 0)
set(WAMR_BUILD_INTERP 1)   # builds interpreter version not AoT/JIT
set(WAMR_BUILD_AOT 0)
set(WAMR_BUILD_JIT 0)
set(WAMR_BUILD_LAZY_JIT 0)
set(WAMR_BUILD_LIBC_BUILTIN 1)
set(WAMR_BUILD_LIBC_WASI 1)   # WASI support for syscalls
set(WAMR_BUILD_LIB_PTHREAD 0)
set(WAMR_BUILD_REF_TYPES 1)

# set(ABSL_ENABLE_INSTALL ON)


# builds wamr, creating wamrlib static library and links to public interface of wamrlib
include (${WAMR_ROOT_DIR}/build-scripts/runtime_lib.cmake)
add_library(wamrlib "${WAMR_RUNTIME_LIB_SOURCE}")
target_include_directories(wamrlib PUBLIC
        ${PLATFORM_SHARED_DIR}
)

# ----------------------------------
# Add protobuf & abseil from source
# ----------------------------------

# Abseil
# FetchContent_Declare(
#   abseil
#   GIT_REPOSITORY https://github.com/abseil/abseil-cpp.git
#   GIT_TAG        20250127.1
# )
# FetchContent_MakeAvailable(abseil)
add_subdirectory(third_party/abseil-cpp)


# Enable protoc compiler target (and make sure it's built)
# set(protobuf_BUILD_TESTS OFF)       # Avoid pulling in gtest
# set(protobuf_BUILD_PROTOC_BINARIES ON)
# set(protobuf_INSTALL OFF)

# # Protobuf
# FetchContent_Declare(
#   protobuf
#   GIT_REPOSITORY https://github.com/protocolbuffers/protobuf.git
#   GIT_TAG        v3.19.4  # Or a version you prefer
# )

# # FetchContent_MakeAvailable(protobuf)
# FetchContent_Populate(protobuf)
# add_subdirectory(${protobuf_SOURCE_DIR} ${protobuf_BINARY_DIR})


# set(PROTOC_EXECUTABLE ${protobuf_BINARY_DIR}/protoc)

# set(CMAKE_SKIP_INSTALL_RULES TRUE)
# add_subdirectory(${protobuf_SOURCE_DIR} ${protobuf_BINARY_DIR})

# set_target_properties(protoc_exec PROPERTIES
#   IMPORTED_LOCATION ${protobuf_BINARY_DIR}/protoc
# )

# add_executable(protoc_exec IMPORTED GLOBAL)
# set_target_properties(protoc_exec PROPERTIES
#   IMPORTED_LOCATION ${protobuf_BINARY_DIR}/protoc
# )

target_include_directories(wasm_host PRIVATE third_party/protobuf/src)
target_link_libraries(wasm_host PRIVATE ${CMAKE_SOURCE_DIR}/third_party/protobuf/lib/libprotobuf.a)



# # ----------------------------------
# # Generate protobuf files with nano
# # ----------------------------------

# # protobuf messages
# set(PROTO_FILE ${CMAKE_SOURCE_DIR}/proto_messages/message.proto)

# set(PROTO_GEN_DIR_NANO ${CMAKE_SOURCE_DIR}/proto_messages/generated_nano)
# file(MAKE_DIRECTORY ${PROTO_GEN_DIR_NANO})  

# set(GENERATED_NANOPB_SRC "${PROTO_GEN_DIR_NANO}/message.pb.c")
# set(GENERATED_NANOPB_HDR "${PROTO_GEN_DIR_NANO}/message.pb.h")

# #python generator?
# set(NANOPB_GENERATOR ${CMAKE_SOURCE_DIR}/third_party/nanopb/generator/nanopb_generator.py)
# set(NANOPB_PLUGIN "${PYTHON_EXECUTABLE};${NANOPB_GENERATOR}")

# add_custom_command(
#   OUTPUT ${GENERATED_NANOPB_SRC} ${GENERATED_NANOPB_HDR}
#   COMMAND ${PROTOC_EXECUTABLE}
#     --plugin=protoc-gen-nanopb=${NANOPB_PLUGIN}
#     --nanopb_out=${PROTO_GEN_DIR_NANO}
#     --proto_path=${CMAKE_SOURCE_DIR}/proto_messages
#     ${PROTO_FILE}
#   DEPENDS ${PROTO_FILE}
#   COMMENT "Generating Nanopb C code from .proto"
#   VERBATIM
# )


# # This is only used for building WASM apps from shell script
# add_custom_target(generate_proto_nanopb
#   DEPENDS ${GENERATED_NANOPB_SRC} ${GENERATED_NANOPB_HDR}
#   COMMENT "Generate Nanopb for WASM"
# )
# add_dependencies(generate_proto_nanopb protoc_exec)

# # ----------------------------------
# # Generate protobuf files for full protobuf
# # ----------------------------------
# set(PROTO_GEN_DIR_FULL ${CMAKE_SOURCE_DIR}/proto_messages/generated_full)
# file(MAKE_DIRECTORY ${PROTO_GEN_DIR_FULL})

# # Full protobuf generation
# set(GENERATED_PROTOBUF_SRC "${PROTO_GEN_DIR_FULL}/message.pb.cc")
# set(GENERATED_PROTOBUF_HDR "${PROTO_GEN_DIR_FULL}/message.pb.h")  # note: same name

# add_custom_command(
#   OUTPUT ${GENERATED_PROTOBUF_SRC} ${GENERATED_PROTOBUF_HDR}
#   COMMAND ${PROTOC_EXECUTABLE}
#     --proto_path=${CMAKE_SOURCE_DIR}/proto_messages
#     --cpp_out=${PROTO_GEN_DIR_FULL}
#     ${PROTO_FILE}
#   DEPENDS ${PROTO_FILE}
#   COMMENT "Generating Protobuf C++ code from .proto"
#   VERBATIM
# )

# add_custom_target(generate_proto_cpp ALL DEPENDS ${GENERATED_PROTOBUF_SRC} ${GENERATED_PROTOBUF_HDR})
# add_dependencies(generate_proto_cpp protoc_exec)

set(GENERATED_PROTOBUF_SRC "${CMAKE_SOURCE_DIR}/proto_messages/generated_full/message.pb.cc")
set(GENERATED_PROTOBUF_HDR "${CMAKE_SOURCE_DIR}/proto_messages/generated_full/message.pb.h")

target_sources(wasm_host PRIVATE ${GENERATED_PROTOBUF_SRC})
target_include_directories(wasm_host PRIVATE proto_messages/generated_full)

# ----------------------------------
# Executable
# ----------------------------------

# Build the wasm_host executable
add_executable(wasm_host 
  ${SOURCES}
)

file(MAKE_DIRECTORY ${PROTO_GEN_DIR_NANO})
add_dependencies(wasm_host generate_proto_cpp)

target_sources(wasm_host PRIVATE ${GENERATED_PROTOBUF_SRC})

target_include_directories(wasm_host PRIVATE
    include
    ${wamr_ext_SOURCE_DIR}/core/iwasm/include
    ${protobuf_SOURCE_DIR}/src
    ${PROTO_GEN_DIR_FULL}
)

# Link the prebuilt libraries
target_link_libraries(wasm_host
        wamrlib
        pthread
        m
        dl
        libprotobuf
        absl::base
        # protobuf::libprotobuf-lite  #(for newer versions of protobuf)
)
